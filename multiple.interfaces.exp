#!/usr/bin/expect
#
# Apply to: QuantaMesh Network OS (QNOS)
# Build by: QCTUS SWFAE
# Bulld date: 2016/04/01
# Purpose: This example apply commands to multiple interfaces one by one.
# 


# initial vars (modify it to fit your environment)
set PATH "/tmp/"
set term_server_addr ts-01
set conport {2016}
set username "admin"
set password "\r"
set enablepass "\r"
set interface_index {1 3 5}
#set interface_index {1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48}

# vars
set global_prompt ") #$"
set config_prompt "Config)#$"

# slow down as console terminal reponse is sloppy 
set force_slow 1
if {$force_slow} {
	set send_slow {1 .07}
    proc send {arg} {
		sleep .3
		exp_send -s -- $arg
		sleep .3
	}
    proc send_user {arg} {
		sleep .3
		exp_send_user -s -- $arg
		sleep .3
	}
}

####################SCRIPT START####################

for {set i 0} {$i < [llength $conport]} {incr i 1} {
# enable logging to file and disable logging stdout
set consolesession [lindex $conport $i]
log_file -noappend $PATH/console_$consolesession.log
log_user 0

####################AUTO LOGIN START####################

proc login {user pass con} {
	for {set nRetry 1} {$nRetry <= 5} {incr nRetry 1} {
		expect {
			-re "(#|>)$" {
				send "\r"
				break
			}	
			"assword:" {
				send "$pass"
			}
			"User:" {
				send "$user\r"
				exp_continue
			}
		}
	}

	if {$nRetry > 5} {
		send_user "CONSOLE $con: PASSWORD FAILED [expr {$nRetry-1}] TIMES\n"
#		send_log "CONSOLE $con: PASSWORD FAILED [expr {$nRetry-1}] TIMES\n"
		exit
	} else {
		set htime "\[[clock format [clock seconds] -format {%b-%d-%y %H:%M:%S} -timezone :localtime]\]"
		send_user "$htime CONSOLE $con: LOGIN SUCCESS\n"
	}
}

spawn telnet $term_server_addr $consolesession
# verify terminal server connected
expect -re "Connected to port*" {
	send "\r"
}

login $username $password $consolesession

# reset to global mode#
expect {
	-re ">$" { 
		send "enable\r" 
		send "$enablepass" 
		}
	-re "#$" { send "end\r" }
}

####################AUTO LOGIN END####################

send "configure\r"
expect $config_prompt
for {set i 0} {$i < [llength $interface_index]} {incr i 1} {
	send "Interface 0/[lindex $interface_index $i]\r"
	expect {
		"Interface 0/[lindex $interface_index $i])#" {
			send "mtu 9216\r"
			} timeout {
				send_user "FAILED TO RUN SCRIPT. ABORTED!\n"
				exit
			}
		}
	}
send "end\r"
expect $global_prompt {send "copy running-config startup-config\r"}
expect "Configuration Saved!" {send_user "CONSOLE $consolesession: configuration is saved.\n"}
set htime "\[[clock format [clock seconds] -format {%b-%d-%y %H:%M:%S} -timezone :localtime]\]"
expect $global_prompt {send_user "$htime CONSOLE $consolesession: TASKS ARE FINISHED.\n"}
	
# turn off logging
log_file
}
####################SCRIPT END####################
